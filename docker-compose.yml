# This Docker Compose file will spin up an ACS community installation on a local host.
# It requires at least 6GB of memory available to distribute among containers.
#
# For performance tuning, increase each container mem_limit and give a percentage of
# it to the JVM. Use either the -Xms,-Xmx flags or the newly added flags in
# java 10+: -XX:MaxRAMPercentage and -XX:MinRAMPercentage.
# More details here:
# https://www.oracle.com/technetwork/java/javase/10-relnote-issues-4108729.html
#
services:
  alfresco:
    image: docker.io/alfresco/alfresco-content-repository-community:25.1.0
    restart: unless-stopped
    mem_limit: 1900m
    environment:
      JAVA_TOOL_OPTIONS: >-
        -Dencryption.keystore.type=JCEKS -Dencryption.cipherAlgorithm=DESede/CBC/PKCS5Padding -Dencryption.keyAlgorithm=DESede -Dencryption.keystore.location=/usr/local/tomcat/shared/classes/alfresco/extension/keystore/keystore -Dmetadata-keystore.password=mp6yc0UD9e -Dmetadata-keystore.aliases=metadata -Dmetadata-keystore.metadata.password=oKIWzVdEdA -Dmetadata-keystore.metadata.algorithm=DESede
      JAVA_OPTS: >-
        -Ddb.driver=org.postgresql.Driver -Ddb.username=alfresco -Ddb.password=alfresco -Ddb.url=jdbc:postgresql://postgres:5432/alfresco -Dsolr.host=solr6 -Dsolr.port=8983 -Dsolr.http.connection.timeout=1000 -Dsolr.secureComms=secret -Dsolr.sharedSecret=secret -Dsolr.base.url=/solr -Dindex.subsystem.name=solr6 -Dshare.host=localhost -Dshare.port=8080 -Dalfresco.host=localhost -Dalfresco.port=8080 -Dcsrf.filter.enabled=false -Daos.baseUrlOverwrite=http://localhost:8080/alfresco/aos -Dmessaging.broker.url="failover:(nio://activemq:61616)?timeout=3000&jms.useCompression=true" -Ddeployment.method=DOCKER_COMPOSE -DlocalTransform.core-aio.url=http://transform-core-aio:8090/ -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/alfresco/api/-default-/public/alfresco/versions/1/probes/-ready-" ]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 1m
    volumes:
      - alf-repo-data:/usr/local/tomcat/alf_data
    extends:
      file: commons/base.yaml
      service: alfresco

  transform-core-aio:
    image: alfresco/alfresco-transform-core-aio:5.1.7
    restart: unless-stopped
    mem_limit: 1536m
    environment:
      JAVA_OPTS: >-
        -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80
    ports:
      - "8090:8090"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8090/ready" ]
      interval: 20s
      timeout: 2s
      retries: 3
      start_period: 10s
    depends_on:
      activemq:
        condition: service_healthy

  share:
    image: docker.io/alfresco/alfresco-share:25.1.0
    restart: unless-stopped
    mem_limit: 1g
    environment:
      CSRF_FILTER_ORIGIN: http://localhost:8080
      CSRF_FILTER_REFERER: http://localhost:8080/share/.*
      REPO_HOST: "alfresco"
      REPO_PORT: "8080"
      JAVA_OPTS: >-
        -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80 -Dalfresco.host=localhost -Dalfresco.port=8080 -Dalfresco.context=alfresco -Dalfresco.protocol=http
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/share" ]
      interval: 20s
      timeout: 2s
      retries: 3
      start_period: 15s
    depends_on:
      alfresco:
        condition: service_healthy
    extends:
      file: commons/base.yaml
      service: share

  postgres:
    image: postgres:16.5
    restart: unless-stopped
    mem_limit: 512m
    environment:
      - POSTGRES_PASSWORD=alfresco
      - POSTGRES_USER=alfresco
      - POSTGRES_DB=alfresco
    command: postgres -c max_connections=300 -c log_min_messages=LOG
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - wikinet
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  solr6:
    image: docker.io/alfresco/alfresco-search-services:2.0.15
    restart: unless-stopped
    mem_limit: 2g
    environment:
      SOLR_ALFRESCO_HOST: "alfresco"
      SOLR_ALFRESCO_PORT: "8080"
      SOLR_SOLR_HOST: "solr6"
      SOLR_SOLR_PORT: "8983"
      SOLR_CREATE_ALFRESCO_DEFAULTS: "alfresco,archive"
      ALFRESCO_SECURE_COMMS: "secret"
      JAVA_TOOL_OPTIONS: >-
        -Dalfresco.secureComms.secret=secret
    ports:
      - "8083:8983"
    volumes:
      - solr6-data:/opt/alfresco-search-services/data

  activemq:
    image: alfresco/alfresco-activemq:5.18-jre17-rockylinux8
    restart: unless-stopped
    mem_limit: 1g
    ports:
      - "8161:8161"
      - "5672:5672"
      - "61616:61616"
      - "61613:61613"
    volumes:
      - activemq-data:/opt/activemq/data
    healthcheck:
      test: [ "CMD", "/opt/activemq/bin/activemq", "query", "--objname", "type=Broker,brokerName=*,service=Health", "|", "grep", "Good" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  content-app:
    image: alfresco/alfresco-content-app:6.0.0
    restart: unless-stopped
    mem_limit: 128m
    environment:
      APP_BASE_SHARE_URL: "http://localhost:8080/aca/#/preview/s"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 1s
    extends:
      file: commons/base.yaml
      service: content-app

  control-center:
    image: quay.io/alfresco/alfresco-control-center:9.4.0
    restart: unless-stopped
    mem_limit: 128m
    environment:
      APP_CONFIG_PROVIDER: "ECM"
      APP_CONFIG_AUTH_TYPE: "BASIC"
      BASE_PATH: ./
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 1s
    extends:
      file: commons/base.yaml
      service: control-center
  wiki:
    image: ghcr.io/requarks/wiki:2
    depends_on:
      - postgres
    environment:
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: wikijs
      DB_PASS: wikijsrocks
      DB_NAME: wiki
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - wiki-data:/data
    networks:
      - wikinet
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wiki.rule=PathPrefix(`/wiki`) || PathPrefix(`/_assets`)"
      - "traefik.http.routers.wiki.entrypoints=web"
      - "traefik.http.routers.wiki.service=wiki"
      - "traefik.http.services.wiki.loadbalancer.server.port=3000"

  proxy:
    restart: unless-stopped
    extends:
      file: commons/base.yaml
      service: proxy
volumes:
  alf-repo-data:
  postgres-data:
  solr6-data:
  activemq-data:
  wiki-data:


networks:
  wikinet:
